"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressServerlessApiStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const path = require("path");
const cdk = require("aws-cdk-lib");
var CLOUDWATCH_POLICY = "CloudWatchFullAccess";
class ExpressServerlessApiStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create a lambda layer
        const layer = new aws_cdk_lib_1.aws_lambda.LayerVersion(this, 'WebHealthlayer', {
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(path.join("./", "layers")),
            compatibleRuntimes: [aws_cdk_lib_1.aws_lambda.Runtime.NODEJS_14_X],
            removalPolicy: cdk.RemovalPolicy.DESTROY
        });
        // Express API Lambda initialization
        const EALambda = this.createLambda(this, "ExpressAPILambda", "resources", "ApiLambda.handler", this.createRole(this, "ExpressAPILambdaRole", CLOUDWATCH_POLICY), [layer]);
        // Apply removal policy to lambda function to Destroy it when stack is deleted
        EALambda.applyRemovalPolicy(cdk.RemovalPolicy.DESTROY);
        // Create an API Gateway for Express API Lambda
        const api = new aws_cdk_lib_1.aws_apigateway.LambdaRestApi(this, "ExpressAPISameer", {
            handler: EALambda
        });
        // Apply removal policy to API Gateway to Destroy it when stack is deleted.
        api.applyRemovalPolicy(cdk.RemovalPolicy.DESTROY);
    }
    // A function to create lambda function.
    createLambda(self, id, asset, handler, role, layers) {
        const lambdaFunction = new aws_cdk_lib_1.aws_lambda.Function(self, id, {
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.NODEJS_14_X,
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(asset),
            handler: handler,
            role: role,
            layers: layers,
            timeout: aws_cdk_lib_1.Duration.seconds(60)
        });
        return lambdaFunction;
    }
    // A function to create IAM role.
    createRole(self, id, policyName) {
        const role = new aws_cdk_lib_1.aws_iam.Role(self, id, {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal("lambda.amazonaws.com")
        });
        role.addManagedPolicy(aws_cdk_lib_1.aws_iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole"));
        role.addManagedPolicy(aws_cdk_lib_1.aws_iam.ManagedPolicy.fromAwsManagedPolicyName(policyName));
        return role;
    }
}
exports.ExpressServerlessApiStack = ExpressServerlessApiStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc19zZXJ2ZXJsZXNzX2FwaS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cHJlc3Nfc2VydmVybGVzc19hcGktc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBT3FCO0FBR3JCLDZCQUE2QjtBQUM3QixtQ0FBbUM7QUFFbkMsSUFBSSxpQkFBaUIsR0FBRyxzQkFBc0IsQ0FBQztBQUUvQyxNQUFhLHlCQUEwQixTQUFRLG1CQUFLO0lBQ2xELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsd0JBQXdCO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLElBQUksd0JBQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQzVELElBQUksRUFBRSx3QkFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDdEQsa0JBQWtCLEVBQUUsQ0FBQyx3QkFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDaEQsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztTQUN6QyxDQUFDLENBQUM7UUFFSCxvQ0FBb0M7UUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FDaEMsSUFBSSxFQUNKLGtCQUFrQixFQUNsQixXQUFXLEVBQ1gsbUJBQW1CLEVBQ25CLElBQUksQ0FBQyxVQUFVLENBQ2IsSUFBSSxFQUNKLHNCQUFzQixFQUN0QixpQkFBaUIsQ0FDbEIsRUFDRCxDQUFDLEtBQUssQ0FBQyxDQUNSLENBQUM7UUFDRiw4RUFBOEU7UUFDOUUsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkQsK0NBQStDO1FBQy9DLE1BQU0sR0FBRyxHQUFHLElBQUksNEJBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ2pFLE9BQU8sRUFBRSxRQUFRO1NBQ2xCLENBQUMsQ0FBQztRQUNILDJFQUEyRTtRQUMzRSxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVwRCxDQUFDO0lBRUQsd0NBQXdDO0lBQ3hDLFlBQVksQ0FBQyxJQUFTLEVBQUUsRUFBVSxFQUFFLEtBQWEsRUFBRSxPQUFlLEVBQUUsSUFBUyxFQUFFLE1BQVc7UUFDeEYsTUFBTSxjQUFjLEdBQUcsSUFBSSx3QkFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQ25ELE9BQU8sRUFBRSx3QkFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSx3QkFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsc0JBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1NBQzlCLENBQ0EsQ0FBQztRQUNGLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxpQ0FBaUM7SUFDakMsVUFBVSxDQUFDLElBQVMsRUFBRSxFQUFVLEVBQUUsVUFBZTtRQUMvQyxNQUFNLElBQUksR0FBRyxJQUFJLHFCQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDbEMsU0FBUyxFQUFFLElBQUkscUJBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQztTQUM1RCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO1FBQzlHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzlFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUVGO0FBNURELDhEQTREQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFN0YWNrLFxuICBTdGFja1Byb3BzLFxuICBEdXJhdGlvbixcbiAgYXdzX2xhbWJkYSBhcyBsYW1iZGEsXG4gIGF3c19pYW0gYXMgaWFtLFxuICBhd3NfYXBpZ2F0ZXdheSBhcyBhcGlnYXRld2F5LFxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5cbnZhciBDTE9VRFdBVENIX1BPTElDWSA9IFwiQ2xvdWRXYXRjaEZ1bGxBY2Nlc3NcIjtcblxuZXhwb3J0IGNsYXNzIEV4cHJlc3NTZXJ2ZXJsZXNzQXBpU3RhY2sgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgLy8gQ3JlYXRlIGEgbGFtYmRhIGxheWVyXG4gICAgY29uc3QgbGF5ZXIgPSBuZXcgbGFtYmRhLkxheWVyVmVyc2lvbih0aGlzLCAnV2ViSGVhbHRobGF5ZXInLCB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKFwiLi9cIiwgXCJsYXllcnNcIikpLFxuICAgICAgY29tcGF0aWJsZVJ1bnRpbWVzOiBbbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1hdLFxuICAgICAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWVxuICAgIH0pO1xuXG4gICAgLy8gRXhwcmVzcyBBUEkgTGFtYmRhIGluaXRpYWxpemF0aW9uXG4gICAgY29uc3QgRUFMYW1iZGEgPSB0aGlzLmNyZWF0ZUxhbWJkYShcbiAgICAgIHRoaXMsXG4gICAgICBcIkV4cHJlc3NBUElMYW1iZGFcIixcbiAgICAgIFwicmVzb3VyY2VzXCIsXG4gICAgICBcIkFwaUxhbWJkYS5oYW5kbGVyXCIsXG4gICAgICB0aGlzLmNyZWF0ZVJvbGUoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIFwiRXhwcmVzc0FQSUxhbWJkYVJvbGVcIixcbiAgICAgICAgQ0xPVURXQVRDSF9QT0xJQ1lcbiAgICAgICksXG4gICAgICBbbGF5ZXJdXG4gICAgKTtcbiAgICAvLyBBcHBseSByZW1vdmFsIHBvbGljeSB0byBsYW1iZGEgZnVuY3Rpb24gdG8gRGVzdHJveSBpdCB3aGVuIHN0YWNrIGlzIGRlbGV0ZWRcbiAgICBFQUxhbWJkYS5hcHBseVJlbW92YWxQb2xpY3koY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSk7XG5cbiAgICAvLyBDcmVhdGUgYW4gQVBJIEdhdGV3YXkgZm9yIEV4cHJlc3MgQVBJIExhbWJkYVxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LkxhbWJkYVJlc3RBcGkodGhpcywgXCJFeHByZXNzQVBJU2FtZWVyXCIsIHtcbiAgICAgIGhhbmRsZXI6IEVBTGFtYmRhXG4gICAgfSk7XG4gICAgLy8gQXBwbHkgcmVtb3ZhbCBwb2xpY3kgdG8gQVBJIEdhdGV3YXkgdG8gRGVzdHJveSBpdCB3aGVuIHN0YWNrIGlzIGRlbGV0ZWQuXG4gICAgYXBpLmFwcGx5UmVtb3ZhbFBvbGljeShjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZKTtcblxuICB9XG5cbiAgLy8gQSBmdW5jdGlvbiB0byBjcmVhdGUgbGFtYmRhIGZ1bmN0aW9uLlxuICBjcmVhdGVMYW1iZGEoc2VsZjogYW55LCBpZDogc3RyaW5nLCBhc3NldDogc3RyaW5nLCBoYW5kbGVyOiBzdHJpbmcsIHJvbGU6IGFueSwgbGF5ZXJzOiBhbnkpIHtcbiAgICBjb25zdCBsYW1iZGFGdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc2VsZiwgaWQsIHtcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNF9YLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KGFzc2V0KSxcbiAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICByb2xlOiByb2xlLFxuICAgICAgbGF5ZXJzOiBsYXllcnMsXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDYwKVxuICAgIH1cbiAgICApO1xuICAgIHJldHVybiBsYW1iZGFGdW5jdGlvbjtcbiAgfVxuXG4gIC8vIEEgZnVuY3Rpb24gdG8gY3JlYXRlIElBTSByb2xlLlxuICBjcmVhdGVSb2xlKHNlbGY6IGFueSwgaWQ6IHN0cmluZywgcG9saWN5TmFtZTogYW55KSB7XG4gICAgY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzZWxmLCBpZCwge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoXCJsYW1iZGEuYW1hem9uYXdzLmNvbVwiKVxuICAgIH0pO1xuICAgIHJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoXCJzZXJ2aWNlLXJvbGUvQVdTTGFtYmRhQmFzaWNFeGVjdXRpb25Sb2xlXCIpKTtcbiAgICByb2xlLmFkZE1hbmFnZWRQb2xpY3koaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKHBvbGljeU5hbWUpKTtcbiAgICByZXR1cm4gcm9sZTtcbiAgfVxuXG59XG4iXX0=